on:
  schedule:
    - cron:  '30 5,17 * * *'
  pull_request:

jobs:
  apiunits:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    strategy:
      matrix:
        python-version: ["3.11"] # , "3.12"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd api && poetry install
      - name: Prep docker
        run: |
          rm -rf api/tests/data/cfssl/*
          rm -rf api/tests/data/ca_public/*
          docker system prune --all --volumes --force
          cd api/tests && docker compose -f docker-compose.yml build --pull
          docker compose -f docker-compose.yml pull --ignore-buildable
          docker compose -f docker-compose.yml up -d --wait || docker compose -f docker-compose.yml logs
          docker compose -f docker-compose.yml down -v
      - name: Test with pytest
        run: |
          cd api && poetry run py.test -v --junitxml=pytest-apiunit.xml tests/
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: 'api/pytest*.xml'
          detailed_summary: true
          check_name: 'api unit tests'
  rmlocal:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: install dependencies
      id: install_dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    - name: pre-commit
      id: pre_commit
      run: |
        export SKIP=no-commit-to-branch
        source example_env.sh
        pre-commit run --all-files
    - name: docker compose build
      id: compose_build
      run: |
        shopt -s expand_aliases
        alias dcloc="docker compose -p rmlocal -f docker-compose-local.yml"
        docker system prune --all --volumes --force
        dcloc build --pull
        dcloc pull --ignore-buildable
    - name: docker compose cleanup
      id: compose_clean_1
      run: |
        shopt -s expand_aliases
        alias dcloc="docker compose -p rmlocal -f docker-compose-local.yml"
        alias dcdev="docker compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml"
        dcloc down -v || true
        dcdev down -v || true
    - name: docker compose up first attempt
      id: compose_up_first
      run: |
        shopt -s expand_aliases
        alias dcloc="docker compose -p rmlocal -f docker-compose-local.yml"
        dcloc up --wait || (dcloc logs && exit 1)
      continue-on-error: true
    - name: docker compose up second attempt
      if: ${{ steps.compose_up_first.outcome == 'failure' }}
      id: compose_up_second
      run: |
        shopt -s expand_aliases
        alias dcloc="docker compose -p rmlocal -f docker-compose-local.yml"
        dcloc up --wait || (dcloc logs && exit 1)
      continue-on-error: true
    - name: add test users
      id: add_test_users
      run: |
        docker ps
        docker exec rmlocal-rmapi-1 rasenmaeher_api addtestusers
        docker exec rmlocal-rmapi-1 cat /etc/hosts
    - name: Test with pytest
      id: run_pytest
      run: |
        shopt -s expand_aliases
        alias dcloc="docker compose -p rmlocal -f docker-compose-local.yml"
        py.test -v --junitxml=pytest-rmlocal.xml tests/ || (dcloc logs && exit 1)
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: '**/pytest*.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'rmlocal integration tests'
    - name: docker compose cleanup
      id: compose_clean_2
      if: ${{ !cancelled() }}
      run: |
        shopt -s expand_aliases
        alias dcloc="docker compose -p rmlocal -f docker-compose-local.yml"
        dcloc down -v || true

  rmdev:
    if: false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: install dependencies
      id: install_dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    - name: pre-commit
      id: pre_commit
      run: |
        export SKIP=no-commit-to-branch
        source example_env.sh
        pre-commit run --all-files
    - name: docker compose build
      id: compose_build
      run: |
        shopt -s expand_aliases
        alias dcdev="docker compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml"
        docker system prune --all --volumes --force
        dcdev build --pull
        dcdev pull --ignore-buildable
    - name: docker compose cleanup
      id: compose_clean_1
      run: |
        shopt -s expand_aliases
        alias dcdev="docker compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml"
        alias dcloc="docker compose -p rmlocal -f docker-compose-local.yml"
        dcdev down -v || true
        dcloc down -v || true
    - name: docker compose up first attempt
      id: compose_up_first
      run: |
        shopt -s expand_aliases
        alias dcdev="docker compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml"
        dcdev up --wait || ( dcdev logs && exit 1 )
      continue-on-error: true
    - name: docker compose up second attempt
      if: ${{ steps.compose_up_first.outcome == 'failure' }}
      id: compose_up_second
      run: |
        shopt -s expand_aliases
        alias dcdev="docker compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml"
        dcdev up --wait || ( dcdev logs && exit 1 )
      continue-on-error: true
    - name: add test users
      id: add_test_users
      run: |
        docker ps
        docker exec rmdev-rmapi-1 /.venv/bin/rasenmaeher_api addtestusers
    - name: Test with pytest
      id: run_pytest
      run: |
        shopt -s expand_aliases
        alias dcdev="docker compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml"
        py.test -v --junitxml=pytest-rmdev.xml tests/ || ( dcdev logs && exit 1 )
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: '**/pytest*.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'rmdev integration tests'
    - name: docker compose cleanup
      id: compose_clean_2
      if: ${{ !cancelled() }}
      run: |
        shopt -s expand_aliases
        alias dcdev="docker compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml"
        dcdev down -v || true
