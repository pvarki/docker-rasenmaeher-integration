# This extends the _local file, run with:
#   `docker-compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml up -d`

x-nginxbuilds: &nginxbuildinfo
  image: pvarki/nginx:1.27${DOCKER_TAG_EXTRA:-}
  build:
    context: ./nginx
    dockerfile: Dockerfile
    target: production


services:

  nginx_templates:
    image: pvarki/nginx:templates-local${DOCKER_TAG_EXTRA:-}
    build:
      context: ./nginx
      dockerfile: Dockerfile
      target: configs
    volumes:
      - nginx_templates:/deliver

  rmapi:
    image: pvarki/rmapi:devel_shell${DOCKER_TAG_EXTRA:-}
    build:
      context: ./api
      dockerfile: Dockerfile
      target: devel_shell
    command: ["-c", "source /root/.profile && /app/docker/container-init.sh && poetry install && uvicorn --host 0.0.0.0 --port 8000 --log-level debug --factory rasenmaeher_api.web.application:get_app --reload"]
    healthcheck:
      test: '/bin/bash -c "source /root/.profile && rasenmaeher_api healthcheck" || exit 1'
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    volumes:
      - "./api:/app"

  rmmtx:
    image: pvarki/rmmtx:devel_shell${DOCKER_TAG_EXTRA:-}
    build:
      context: ./mtxauthz
      dockerfile: Dockerfile
      target: devel_shell
    command: ["-c", "source /root/.profile && /app/docker/container-init.sh && poetry install && uvicorn --host 0.0.0.0 --port 8005 --log-level debug --factory rmmtxauthz.web.application:get_app --reload"]
    healthcheck:
      test: 'curl http://localhost:8005/api/v1/healthcheck || exit 1'
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    volumes:
      - "./mtxauthz:/app"
      - "./mtxauthz/rune/output/rune.json:/opt/templates/mediamtx.json"

  rmuidev:
    image: pvarki/rmui:devel_shell${DOCKER_TAG_EXTRA:-}
    build:
      context: ./ui
      dockerfile: Dockerfile
      target: devel_shell
    command: ["-c", "npm install && npm run dev -- --port 8002 --host 0.0.0.0"]
    volumes:
      - "./ui:/app"
    environment:
      SERVER_DOMAIN: ${SERVER_DOMAIN:-localmaeher.dev.pvarki.fi}
      API_PORT: ${NGINX_HTTPS_PORT:-4439}
      VITE_ASSET_SET: ${VITE_ASSET_SET:-neutral}
      RELEASE_TAG: "localdev"
    networks:
      - intranet
    ports:  # REMINDER Do not expose these in production
      - "${NGINX_UI_UPSTREAM_PORT:-8002}:${NGINX_UI_UPSTREAM_PORT:-8002}"
    healthcheck:
      test: 'true'  # FIXME
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  rmnginx:  # need to load different templates for uidev
    <<: *nginxbuildinfo
    environment:
      NGINX_UI_UPSTREAM: "rmuidev"
      NGINX_UI_UPSTREAM_PORT: ${NGINX_UI_UPSTREAM_PORT:-8002}
      NGINX_ENVSUBST_TEMPLATE_DIR: /templates_uidev
    volumes:
      - ./nginx/templates_rasenmaeher_uidev:/templates_uidev
    depends_on:
      rmapi:
        condition: service_healthy
      rmuidev:
        condition: service_healthy

  kwinit_prod:  # For building the go executable needed by rmfpapi
    image: pvarki/kw_product_init:${PVARKI_VERSION_TAG:-latest}${DOCKER_TAG_EXTRA:-}
    build:
      context: ./kw_product_init
      dockerfile: Dockerfile
      target: production
    command: ["help"]

  rmfpapi:
    image: pvarki/rmfpapi:devel_shell${DOCKER_TAG_EXTRA:-}
    build:
      context: ./fpintegration
      dockerfile: Dockerfile
      target: devel_shell
    command: ["-c", "source /root/.profile && /app/docker/container-init.sh && poetry install && uvicorn --host 0.0.0.0 --port 8001 --log-level debug --factory rmfpapi.app:get_app --reload"]
    volumes:
      - "./fpintegration:/app"
      - "./fpintegration/rune/output/rune.json:/opt/templates/rune-fake.json"
    depends_on:
      rmnginx:
        condition: service_healthy

  takrmapi:
    image: pvarki/takrmapi:devel_shell${DOCKER_TAG_EXTRA:-}
    build:
      context: ./takintegration
      dockerfile: Dockerfile
      target: integ_devel_shell
    command: ["-c", "source /root/.profile && /app/docker/container-init.sh && poetry install && uvicorn --host 0.0.0.0 --port 8003 --log-level debug --factory takrmapi.app:get_app --reload"]
    volumes:
      - "./takintegration:/app"
      - "./takintegration/rune/output/rune.json:/opt/templates/tak.json"
    healthcheck:
      test: '/bin/bash -c "source /root/.profile && takrmapi healthcheck" || exit 1'
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      rmnginx:
        condition: service_healthy

  blapi:
    image: pvarki/blapi:local${DOCKER_TAG_EXTRA:-}
    build:
      context: ./battlelog
      dockerfile: Dockerfile
      target: production
    # When BL has support for active reloads add the correct command
    #volumes:
    #  - "./battlelog:/usr/src/app"
    #command: []


  productsnginx:  # apparently we have to specify these here or it tries to start too early
    <<: *nginxbuildinfo
    depends_on:
      nginx_templates:
        condition: service_completed_successfully
      rmfpapi:
        condition: service_healthy
      blapi:
        condition: service_healthy
      takrmapi:
        condition: service_healthy


  kwinit:  # docker-compose -p rmdev -f docker-compose-local.yml -f docker-compose-dev.yml exec kwinit zsh
    image: pvarki/kw_product_init:devel_shell${DOCKER_TAG_EXTRA:-}
    build:
      context: ./kw_product_init
      dockerfile: Dockerfile
      target: devel_shell
    stdin_open: true
    tty: true
    command: []
    volumes:
      - "./kw_product_init:/app"
    depends_on:
      rmapi:
        condition: service_healthy
    profiles: ["kwinit_dev"]


networks:
  intranet:

volumes:
  nginx_templates:
